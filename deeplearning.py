# -*- coding: utf-8 -*-
"""deeplearning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bpmqFMqw4rt9SzA77J6WtkNdYvI3k3QH
"""

import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

x_train.shape

plt.matshow(x_train[2])

y_train[:9]

x_train, x_test = x_train / 255.0, x_test / 255.0

x_train_flattened = x_train.reshape(len(x_train),28*28)
x_train_flattened.shape

x_test_flattened = x_test.reshape(len(x_test),28*28)
x_test_flattened.shape

from tensorflow import keras

# Load the MNIST dataset (x_train has shape (num_samples, 28, 28))
(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),  # Expects (28,28) images
    keras.layers.Dense(10, activation='sigmoid'),
])

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model.fit(x_train, y_train, epochs=5)

plt.matshow(x_test[7])

# Use the original x_test which has shape (num_samples, 28, 28)
y_predicted = model.predict(x_test[7].reshape(1, 28, 28))
print(y_predicted[7])  # This prints the probability for class 9
 # Print the predicted probabilities for all 10 classes

import numpy as np

np.argmax(y_predicted)

